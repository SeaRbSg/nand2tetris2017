// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
  IN  
    x[16], y[16],  // 16-bit inputs        
    zx, // zero the x input?
    nx, // negate the x input?
    zy, // zero the y input?
    ny, // negate the y input?
    f,  // compute out = x + y (if 1) or x & y (if 0)
    no; // negate the out output?

  OUT 
    out[16], // 16-bit output
    zr, // 1 if (out == 0), 0 otherwise
    ng; // 1 if (out < 0),  0 otherwise

  PARTS:
  Not16(in=true,out=zeroin);
  Mux16(a=x,b=zeroin,sel=zx,out=xone);
  Not16(in=xone,out=negx);
  Mux16(a=xone,b=negx,sel=nx,out=formattedx);
  
  Mux16(a=y,b=zeroin,sel=zy,out=yone);
  Not16(in=yone,out=negy);
  Mux16(a=yone,b=negy,sel=ny,out=formattedy);
  
  Add16(a=formattedx,b=formattedy,out=sumxy);
  And16(a=formattedx,b=formattedy,out=andxy);
  Mux16(a=andxy,b=sumxy,sel=f,out=preout);
  
  Not16(in=preout,out=notpreout);
  Mux16(a=preout,b=notpreout,sel=no,out[0..7]=finalright,out[8..14]=finalleft,out[15]=neg);
  
  Or8Way(in=finalright,out=orright);
  Or8Way(in[0..6]=finalleft,in[7]=neg,out=orleft);
  Or(a=orright,b=orleft,out=nonzero);
  Not(in=nonzero,out=zero);
  
  And(a=zero,b=true,out=zr);
  And(a=neg,b=true,out=ng);
  Mux16(a[0..7]=finalright,a[8..14]]=finalleft,a[15]=neg,b=false,sel=false,out=out);
}
