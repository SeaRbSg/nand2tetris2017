// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //operand transformation pipeline for x and y
    Mux16(a=x, b=false, sel=zx, out=zeroedX); // zero x?
    Not16(in=zeroedX, out=NotOfZeroedX);
    Mux16(a=zeroedX, b=NotOfZeroedX, sel=nx, out=Xoperand); // not x?

    Mux16(a=y, b=false, sel=zy, out=zeroedY); // zero y?
    Not16(in=zeroedY, out=NotOfZeroedY);
    Mux16(a=zeroedY, b=NotOfZeroedY, sel=ny, out=Yoperand); // not y?

    // function application and selection
    And16(a=Xoperand, b=Yoperand, out=AandBout);
    Add16(a=Xoperand, b=Yoperand, out=AplusBout); 
    Mux16(a=AandBout, b=AplusBout, sel=f, out=FunctionApplication);

    //output transformation pipeline
    Not16(in=FunctionApplication, out=NotFunctionApplication);
    Mux16(a=FunctionApplication, b=NotFunctionApplication, sel=no, out=out,
      out[0..7]=lowOrderResultBus, out[8..15]=highOrderResultBus, out[15]=isNegative);

    // State signals
    And(a=isNegative, b=true, out=ng);

    // 16-input NOR of ALU output value to test if output is zero
    Or8Way(in=lowOrderResultBus, out=lowOrderOR);
    Or8Way(in=highOrderResultBus, out=highOrderOR);
    Or(a=lowOrderOR, b=highOrderOR, out=ORofOUT);
    Not(in=ORofOUT, out=zr);
}
