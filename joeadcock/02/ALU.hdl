// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are
 * documented in the book. In addition, the ALU
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values,
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1


CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    Dup16(in=false,out=zero16);
    Dup16(in=true,out=one16);
    Not16(in=x,out=notx);
    Not16(in=y,out=noty);

    Mux4Way16(a=x,b=notx,c=zero16,d=one16,sel[0]=nx,sel[1]=zx,out=xin);
    Mux4Way16(a=y,b=noty,c=zero16,d=one16,sel[0]=ny,sel[1]=zy,out=yin);

    Add16(a=xin,b=yin,out=aplusb);
    And16(a=xin,b=yin,out=andb);
    Not16(in=aplusb,out=invertedaplusb);
    Not16(in=andb,out=invertedaandb);

    Mux4Way16(a=andb,
      b=invertedaandb,
      c=aplusb,
      d=invertedaplusb,
      sel[0]=no,
      sel[1]=f,
      out=output);
    And16(a=output,b=one16,out=out);

    // ng
    And16(a=output,
      b[0]=false,
      b[1]=false,
      b[2]=false,
      b[3]=false,
      b[4]=false,
      b[5]=false,
      b[6]=false,
      b[7]=false,
      b[8]=false,
      b[9]=false,
      b[10]=false,
      b[11]=false,
      b[12]=false,
      b[13]=false,
      b[14]=false,
      b[15]=true,
      out=ngmask);
    Or16Way(in=ngmask,out=ng);

    // zr
    Or16Way(in=output,out=notzr);
    Not(in=notzr,out=zr);
}
