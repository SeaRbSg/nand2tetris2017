// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    DMux(in=true, sel=instruction[15], a=aInstruction, b=cInstruction);
    And(a=instruction[3], b=cInstruction, out=writeM);
    And(a=instruction[4], b=cInstruction, out=writeD);
    And(a=instruction[5], b=cInstruction, out=writeA);
    And(a=instruction[12], b=cInstruction, out=cInstructionA);

    Mux16(a=aOut, b=inM, sel=cInstructionA, out=AM);

    ALU(x=dOut,
        y=AM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,
        out=outM,
        zr=aluZero,
        ng=aluNeg);
    Or(a=aluNeg, b=aluZero, out=aluNegOrZero);
    Not(in=aluNegOrZero, out=aluPos);

    DRegister(in=aluOut,
              load=writeD,
              out=dOut);

    Mux16(a=instruction, b=aluOut, sel=writeA, out=aIn);
    Or(a=writeA, b=aInstruction, out=loadA);
    ARegister(in=aIn,
              load=loadA,
              out=aOut,
              out[0..14]=addressM);

    And3(a=instruction[2], b=aluNeg, c=cInstruction, out=jumpNeg);
    And3(a=instruction[1], b=aluZero, c=cInstruction, out=jumpZero);
    And3(a=instruction[0], b=aluPos, c=cInstruction, out=jumpPos);
    Or(a=jumpNeg, b=jumpZero, out=jumpNZ);
    Or(a=jumpNZ, b=jumpPos, out=jump);

    PC(in=aOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
