// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode c-instruction
    And(a = instruction[15], b = instruction[12], out = a); //a
    And(a = instruction[15], b = instruction[11], out = zx); //c1
    And(a = instruction[15], b = instruction[10], out = nx); //c2
    And(a = instruction[15], b = instruction[9], out = zy); //c3
    And(a = instruction[15], b = instruction[8], out = ny); //c4
    And(a = instruction[15], b = instruction[7], out = f); //c5
    And(a = instruction[15], b = instruction[6], out = no); //c6
    And(a = instruction[15], b = instruction[5], out = d1); //d1
    And(a = instruction[15], b = instruction[4], out = d2); //d2
    And(a = instruction[15], b = instruction[3], out = d3, out = writeM); //d3
    And(a = instruction[15], b = instruction[2], out = j1); //j1
    And(a = instruction[15], b = instruction[1], out = j2); //j2
    And(a = instruction[15], b = instruction[0], out = j3); //j3

    Not(in = instruction[15], out = aInstruction);
    Mux16(a = aluOut, b = instruction, sel = aInstruction, out = aIn);
    Or(a = aInstruction, b = d1, out = loadA);
    ARegister(in = aIn,
              load = loadA,
              out = aValue,
              out[0..14] = addressM);

    Mux16(a = aValue,
          b = inM,
          sel = a,
          out = amValue);

    DRegister(in = aluOut,
              load = d2,
              out = dValue);

    ALU(x = dValue,
        y = amValue,
        zx = zx,
        nx = nx,
        zy = zy,
        ny = ny,
        f = f,
        no = no,
        out = outM,
        out = aluOut,
        zr = zr,
        ng = ng);

    Not(in = zr, out = notZero);
    Not(in = ng, out = notNegative);
    And(a = notZero, b = notNegative, out = jgt);
    And(a = true, b = zr, out = jeq);
    And(a = true, b = notNegative, out = jge);
    And(a = true, b = ng, out = jlt);
    And(a = true, b = notZero, out = jne);
    Or(a = ng, b = zr, out = jle);

    //using mux8way16 as mux8way
    Mux8Way16(
      a[0] = false,
      b[0] = jgt,
      c[0] = jeq,
      d[0] = jge,
      e[0] = jlt,
      f[0] = jne,
      g[0] = jle,
      h[0] = true,
      sel[0] = j3,
      sel[1] = j2,
      sel[2] = j1,
      out[0] = jump);

    PC(in = amValue,
       load = jump,
       inc = true,
       reset = reset,
       out[0..14] = pc[0..14]);
}
