/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // If selected, apply zero to x and y values
    Mux16(a=x, b=false, sel=zx, out=xz);
    Mux16(a=y, b=false, sel=zy, out=yz);

    // If selected, apply not to x and y values
    Not16(in=xz, out=xzn);
    Not16(in=yz, out=yzn);
    Mux16(a=xz, b=xzn, sel=nx, out=xn);
    Mux16(a=yz, b=yzn, sel=ny, out=yn);

    // Apply selected functions, and/add, to x and y values
    And16(a=xn, b=yn, out=f0);
    Add16(a=xn, b=yn, out=f1);
    Mux16(a=f0, b=f1, sel=f, out=fo);

    // If selected, apply not to output value o, extract sign of o
    Not16(in=fo, out=fon);
    Mux16(a=fo, b=fon, sel=no, out=out, out[15]=ng, out[15]=s, out=o);

    // Extract sign of -o
    Not16(in=o, out=on);
    Inc16(in=on, out[15]=sn);

    // If both sign bits are 0, then o must be 0: set zr to 1
    Not(in=s, out=z);
    Not(in=sn, out=zn);
    And(a=z, b=zn, out=zr);
}
