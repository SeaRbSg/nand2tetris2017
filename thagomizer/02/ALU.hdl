// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are
 * documented in the book. In addition, the ALU
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values,
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1


CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:

    // zero the x input?
    Mux16(a=x, b=false, sel=zx, out=zeroedx);

    // negate the x input?
    Not16(in=zeroedx, out=notzeroedx);
    Mux16(a=zeroedx, b=notzeroedx, sel=nx, out=finalx);

    // zero the y input?
    Mux16(a=y, b=false, sel=zy, out=zeroedy);

    // negate the y input?
    Not16(in=zeroedy, out=notzeroedy);
    Mux16(a=zeroedy, b=notzeroedy, sel=ny, out=finaly);

    // Compute And and Add
    And16(a=finalx, b=finaly, out=andout);
    Add16(a=finalx, b=finaly, out=addout);

    // Choose between And and Add
    Mux16(a=andout, b=addout, sel=f, out=postfunc);

    // Negate the output
    Not16(in=postfunc, out=notpostfunc);

    // Choose final output
    // Set ng by checking the most significant bit
    Mux16(a=postfunc,
          b=notpostfunc,
          sel=no,
          out=out,
          out[15]=ng,
          out[0..7]=outlo,
          out[8..15]=outhi);

    // Set zr
    Or8Way(in=outlo, out=zr1);
    Or8Way(in=outhi, out=zr2);
    Or(a=zr1, b=zr2, out=allzeros);
    Not(in=allzeros, out=zr);
}