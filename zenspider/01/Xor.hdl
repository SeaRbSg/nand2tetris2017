// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Xor.hdl

/**
 * Exclusive-or gate:
 * out = not (a == b)
 */

CHIP Xor {
    IN a, b;
    OUT out;

    PARTS:

    // Step 1: original

    // Not(in=a, out=nota);
    // Not(in=b, out=notb);
    // And(a=a, b=notb, out=w1);
    // And(a=nota, b=b, out=w2);
    // Or(a=w1, b=w2, out=out);

    // Step 2: convert to Nor

    // Nor(a=a, b=a, out=nota);      // Not(in=a, out=nota);
    // Nor(a=b, b=b, out=notb);      // Not(in=b, out=notb);
    //
    // Nor(a=a, b=a, out=iw1);       // And(a=a, b=notb, out=w1);
    // Nor(a=notb, b=notb, out=iw2);
    // Nor(a=iw1, b=iw2, out=w1);
    //
    // Nor(a=nota, b=nota, out=iw3); // And(a=nota, b=b, out=w2);
    // Nor(a=b, b=b, out=iw4);
    // Nor(a=iw3, b=iw4, out=w2);
    //
    // Nor(a=w1, b=w2, out=w3);      // Or(a=w1, b=w2, out=out);
    // Nor(a=w3, b=w3, out=out);

    // Step 3: Optimize not(not(x)) -> x

    // Nor(a=a, b=a, out=iw1);       // And(a=a, b=notb, out=w1);
    // Nor(a=iw1, b=b, out=w1);
    //
    // Nor(a=b, b=b, out=iw4);       // And(a=nota, b=b, out=w2);
    // Nor(a=a, b=iw4, out=w2);
    //
    // Nor(a=w1, b=w2, out=w3);      // Or(a=w1, b=w2, out=out);
    // Nor(a=w3, b=w3, out=out);

    // Step 4: share the not logic in one nor

    // This is, on further inspection a not(xnor(a, b)) gate and is
    // longer than it needs to be:

    // Nor(a=a, b=b, out=w1);
    //
    // Nor(a=a, b=w1, out=w2);       // And(a=a, b=notab, out=w1);
    //
    // Nor(a=w1, b=b, out=w3);       // And(a=notab, b=b, out=w2);
    //
    // Nor(a=w2, b=w3, out=w4);      // Or(a=w1, b=w2, out=out);
    // Nor(a=w4, b=w4, out=out);

    // this is a "proper" xor: nor(nor(a,b), nor(nor(a,a),nor(b,b)))

    Nor(a=a,  b=a,  out=w1);    // depth = 1
    Nor(a=b,  b=b,  out=w2);
    Nor(a=a,  b=b,  out=w3);

    Nor(a=w1, b=w2, out=w4);    // depth = 2

    Nor(a=w3, b=w4, out=out);   // depth = 3
}
