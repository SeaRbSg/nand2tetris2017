task :default => :run

task :run => :test

task :shell do
  system docker_cmd
end

task :test do
  f = ENV["F"]
  if f then
    f = File.basename f, ".tst"
    run %(#{docker_cmd} /bin/bash -c 'printf "%10s: " #{f}; ./tools/HardwareSimulator.sh /workspace/#{f}.tst')
  else
    run %(#{docker_cmd} /bin/bash -c 'for F in /workspace/*.tst; do printf "%10s: " $(basename $F .tst); ./tools/HardwareSimulator.sh $F; done')
  end
end

task :link do
  Dir.chdir "01" do
    ln_s Dir["../../projects/01/*.{cmp,tst}"], "."
  end
end

task :copy do
  fs = Dir["../projects/01/*.hdl"]
  fs.reject! { |f| bf = File.basename f; File.exist? "01/#{bf}" }
  cp fs, "01" unless fs.empty?
end

task :clean do
  files =
    Dir["**/*~", "**/*.out"] +
    Dir["**/*"].select { |f| File.symlink? f }
  rm_f files unless files.empty?
end

task :docker do
  system "open -a Docker"
  print "waiting for docker"
  until system "docker info &> /dev/null" do
    print "."
    sleep 1
  end
  puts "done"
end

def run cmd
  system cmd
end

def docker_cmd
  base_dir = File.expand_path "#{Dir.pwd}/.."
  user_dir = File.expand_path Dir.pwd

  cmd = [
         "docker",
         "run",
         "-v", "#{user_dir}/01:/workspace",
         "-v", "#{base_dir}/tools:/tools",
         "-v", "#{base_dir}/projects:/projects",
         "--rm",
         "-it",
         "searbsg/nand2tetris2017",
        ].flatten.compact

  cmd.join " "
end
